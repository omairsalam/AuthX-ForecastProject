/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridLayout;
import java.awt.Paint;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jdesktop.swingx.prompt.PromptSupport;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.plot.XYPlot;
import org.json.JSONException;
import org.json.simple.parser.ParseException;
import org.jfree.chart.ChartUtilities;



/**
 * This class makes a JFrame in which the graphs are displayed and various graph options are provided therefore most of the GUI work 
 * in displaying the graphs is done here. It is called on by the login class
 * which passes in some parameters, along with some other parameters being passed from the Driver.java class. 
 * @author alam
 */
public class MainFrame extends javax.swing.JFrame {
    
    private static ArrayList<String> tagArray = new ArrayList<>();
    private static ArrayList<JFreeChart> chartList = new ArrayList<>();
    private static HashMap<String, Role> myRoleMap = new HashMap<>();
    private static final int MONTHLOOKAHEAD = 1; 
    private static final int RANGELIMIT = 4; 
    private static Date initStartDate;
    private static Date initEndDate;

    /**
     * Creates new MainFrame which contains the graphs that we want to plot, date pickers to change the start and 
     * end dates, an option to change the number of employees, and an option to select a Role to display its graphs 
     */
    public MainFrame() {

        initComponents();
        startDatePicker.setDate(new Date()); //set the start date picker to today's date
        initStartDate = startDatePicker.getDate();
        endDatePicker.setDate(Driver.execute.getEndDate()); //set the end date to a week from the start date 
        initEndDate = endDatePicker.getDate();
        resetButton.setEnabled(true);
     
        //Get current number of employees
        myRoleMap = Driver.execute.getRoleMap();
     recalculateData.setEnabled(false); //recalculate should be false initially 
     PromptSupport.setPrompt("Number of Employees", employeeNumString); //Sets placeholder text for password 
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        authXLogo = new javax.swing.JLabel();
        rolePicker = new javax.swing.JComboBox<>();
        graphPanel = new javax.swing.JPanel();
        rolePickerLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        employeeNumString = new javax.swing.JTextField();
        datePicker = new javax.swing.JLabel();
        startDatePicker = new org.jdesktop.swingx.JXDatePicker();
        datePicker1 = new javax.swing.JLabel();
        endDatePicker = new org.jdesktop.swingx.JXDatePicker();
        recalculateData = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        resetButton = new javax.swing.JButton();
        legendPanel = new javax.swing.JPanel();
        datePicker2 = new javax.swing.JLabel();
        datePicker5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AuthX Employee Forecast");

        authXLogo.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        authXLogo.setIcon(new javax.swing.ImageIcon("/Users/alam/Documents/AuthX/AuthX-ForecastProject/Images/authx-logo.png")); // NOI18N

        rolePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rolePickerActionPerformed(evt);
            }
        });

        graphPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 890, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
        );

        rolePickerLabel.setText("Role Picker: ");
        rolePickerLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rolePickerLabelMouseClicked(evt);
            }
        });

        jLabel1.setText("# Employees:");

        employeeNumString.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeNumStringActionPerformed(evt);
            }
        });
        employeeNumString.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                employeeNumStringKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employeeNumStringKeyPressed(evt);
            }
        });

        datePicker.setText("Start Date:");

        startDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDatePickerActionPerformed(evt);
            }
        });

        datePicker1.setText("End Date:");

        endDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endDatePickerActionPerformed(evt);
            }
        });

        recalculateData.setText("Recalculate");
        recalculateData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recalculateDataActionPerformed(evt);
            }
        });

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));

        resetButton.setForeground(new java.awt.Color(255, 102, 102));
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        datePicker2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        datePicker2.setText("Toggle Graphs");

        datePicker5.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        datePicker5.setForeground(new java.awt.Color(255, 0, 51));
        datePicker5.setText("Click on the Buttons to toggle visibility");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(authXLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(284, 284, 284))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 945, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rolePickerLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rolePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(employeeNumString, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(datePicker)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(startDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(datePicker1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24)
                                        .addComponent(recalculateData, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(resetButton)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(datePicker2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(legendPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(datePicker5)))
                        .addContainerGap(15, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(authXLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rolePickerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rolePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(employeeNumString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recalculateData)
                    .addComponent(resetButton))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(datePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(datePicker5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(legendPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Shows the graphs when we click on a particular role in the role picker combo box 
     * @param evt 
     */
    private void rolePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rolePickerActionPerformed
      showGraphs();
    }//GEN-LAST:event_rolePickerActionPerformed

    /**
     * Remake the chats based on a different number of employees entered by the user 
     * @param evt 
     */
    private void employeeNumStringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeNumStringActionPerformed
        
        /*//Enable the recalculate button so the user can press it 
        recalculateData.setEnabled(true);  
        //Get the current role that we are at 
        String currentRoleName = rolePicker.getSelectedItem().toString();
        
        //The default value of number of employees
        double employeeNumber = myRoleMap.get(currentRoleName).getNumEmployees();
        
        
        //If the field is empty, we need to simply switch back to the previous known value
        //If its not empty, parse the text and use it as the default value 
        if (employeeNumString.getText().equals("")){
            employeeNumString.setText(String.valueOf(employeeNumber));
        }else{
             employeeNumber = Double.parseDouble(employeeNumString.getText());
        }
        //We are in a current Role as specified by the combo box so go grab this 
        Role role = myRoleMap.get(currentRoleName);
        //Change the number of employees in that role object
        role.setNumEmployees(employeeNumber);
        //Based on this new number, remake the charts and obtain the chart list 
        chartList = GraphPlotter.getAllFrames(myRoleMap);
        //use these new charts to show the graphs again 
        showGraphs();

        */
    }//GEN-LAST:event_employeeNumStringActionPerformed

    /**
     * Gets a start date from the user and picks and end date based on that 
     * @param evt 
     */
    private void startDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDatePickerActionPerformed
        Date startDate = startDatePicker.getDate();
        Date endDate = getEndDate(startDate); //gets end dat which is 3 months ahead of start date
        endDatePicker.setDate(endDate); //sets the end date picker to this 
        recalculateData.setEnabled(true); //if we pick a start date, enable this button 
    }//GEN-LAST:event_startDatePickerActionPerformed

    /**
     * Allows the user to recalculate the graphs 
     * @param evt 
     */
    private void endDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endDatePickerActionPerformed
        recalculateData.setEnabled(true); //if we play with end date, end date picker should be enabled 
    }//GEN-LAST:event_endDatePickerActionPerformed

    /**
     * When the recalculate button is pressed, make new charts based on the start and end dates
     * @param evt 
     */
    private void recalculateDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recalculateDataActionPerformed
        recalculateData.setEnabled(false);  
        resetButton.setEnabled(true);
       // System.out.println("Start date is " + getStartOfWeek(startDatePicker.getDate()));
       // System.out.println("End date is " + getStartOfWeek(endDatePicker.getDate()));
         try {
            ArrayList<JFreeChart> importedCharts = Driver.recalculateMaps(getStartOfWeek(startDatePicker.getDate()), endDatePicker.getDate()); //get new charts based on
            //we didn't put an end date on the picker because our loop has something like iterate while its less than endDatePicker
            //so only start date has to be matched to start of the week so it can match up with the keys in the JSON file
            myRoleMap = Driver.execute.getRoleMap(); //get the new rolemap for this chart
            
            //Check if the employee number changed or not 
            String currentRoleName = rolePicker.getSelectedItem().toString();
            Double currentNumboxVal = Double.parseDouble(employeeNumString.getText());
            Double currentNumRoleMapVal = myRoleMap.get(currentRoleName).getNumEmployees();
            
            if (!Objects.equals(currentNumboxVal, currentNumRoleMapVal)){
                //We are in a current Role as specified by the combo box so go grab this 
                Role role = myRoleMap.get(currentRoleName);
                //Change the number of employees in that role object
                role.setNumEmployees(currentNumboxVal);
                chartList = GraphPlotter.getAllFrames(myRoleMap); //refresh the chartList with this new value for numRoleMap
                showGraphs();
            }else{
                getTagList(importedCharts); //get a new tag list for these charts 
                showGraphs(); //repopulate all the graphs 
            }
        } catch (InterruptedException | ParseException | JSONException | IOException | java.text.ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_recalculateDataActionPerformed

    private void employeeNumStringKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeNumStringKeyPressed

    }//GEN-LAST:event_employeeNumStringKeyPressed

    /**
     * Key checker for the number of employees. Only allows digits and dots
     * @param evt 
     */
    private void employeeNumStringKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeNumStringKeyTyped

            //    System.out.println("Key pressed is " + evt.getKeyChar());
        char c = evt.getKeyChar();
         if (!Character.isDigit(c) && c != '.' && evt.getExtendedKeyCode() != KeyEvent.VK_BACK_SPACE && evt.getExtendedKeyCode()!=KeyEvent.VK_ENTER){
             JOptionPane.showMessageDialog(this, "Please only enter decimal numbers or digits!", "Error", JOptionPane.ERROR_MESSAGE);
            evt.consume();
         }else{
             recalculateData.setEnabled(true);
         }

    }//GEN-LAST:event_employeeNumStringKeyTyped

    /**
     * Everything is reset to the default condition meaning the graphs are reset to default 
     * @param evt -
     */
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        //resetButton.setEnabled(false);
        startDatePicker.setDate(initStartDate);
        endDatePicker.setDate(initEndDate);
        try {
            ArrayList<JFreeChart> importedCharts = Driver.recalculateMaps(getStartOfWeek(initStartDate), initEndDate); //get new charts based on
            //we didn't put an end date on the picker because our loop has something like iterate while its less than endDatePicker
            //so only start date has to be matched to start of the week so it can match up with the keys in the JSON file

            getTagList(importedCharts); //get a new tag list for these charts 
            showGraphs(); //repopulate all the graphs 

        } catch (InterruptedException | ParseException | JSONException | IOException | java.text.ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    private void rolePickerLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rolePickerLabelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_rolePickerLabelMouseClicked

    /**
     * Generates a tagArray which is a list of role names populated by parsing the chartList and getting the title from
     * each. 
     * @param importedChartList The list of charts that contains the role names as the title 
     */
    public static void getTagList(ArrayList<JFreeChart> importedChartList){
        tagArray.clear();
        chartList = importedChartList;
        for (JFreeChart s : importedChartList){
            if(s.getTitle().getText().equals("")){
                // do not this add an empty title graph to the tag list 
            }else{
                tagArray.add(s.getTitle().getText());
            }
        }
    } 
    
    /**
     * Populates the role picker combo box based on the tag Array
     */
    public void populateComboBox(){
        rolePicker.removeAll();
        rolePicker.setModel(new DefaultComboBoxModel());rolePicker.removeAll();
        for (String s : tagArray){
            rolePicker.addItem(s);
        }
    }
    
    /**
     * Adds the chart to the displaying JPanel. Gets the current role that is being displayed by the role picker combo box,
     * gets the chart associated with this role title, for instance if role name is BED, then the chart with the title BED
     * is needed. 
     */
    public void showGraphs(){
        String currentRole = rolePicker.getSelectedItem().toString();
        //System.out.println("Current role picked is " + currentRole);
        graphPanel.removeAll();
        for (JFreeChart s1 : chartList){
            //s1.removeLegend();
            //If you have the correct role in the chart
            if (s1.getTitle().getText().equals(currentRole)){
                ChartPanel p = new ChartPanel(s1);
                p.setSize(graphPanel.getWidth(), graphPanel.getHeight());
                p.setVisible(true);
                XYPlot plot = (XYPlot) s1.getPlot();
                plot.getRangeAxis().setRangeWithMargins(-RANGELIMIT, RANGELIMIT);
                createLegendPanel(plot);
                
                
                graphPanel.add(p, BorderLayout.CENTER);
                graphPanel.repaint();
                this.revalidate();
                

            }
        }
        //In the box EmployeeNumString, display the number of employees corresponding to this graph 
        double numEmployees = myRoleMap.get(currentRole).getNumEmployees();
        employeeNumString.setText(String.valueOf(numEmployees));


        /* TESTING FOR DISABLING
        if (currentRole.equals("BED")){
            setVisibility(currentRole, "Likely", false);
        }
        */
    }

    public void exportAllGraphs() throws IOException {

        String dir = LoginFrame.getDirectory();

        String mySubFolder = "Graphs";
        File newDir = new File(dir + File.separator + mySubFolder);
        System.out.println("File path is " + newDir.getAbsolutePath());
        String directory = newDir.getAbsolutePath();
        newDir.mkdir();
        directory += "/";

        for (JFreeChart chart : chartList){
            File file = new File(directory + chart.getTitle().getText().toString() + ".png");
            ChartUtilities.saveChartAsPNG(file, chart, 892, 503);
        }
    }

    /**
     * Sets the Visibility of a series for a given Role and Project Code.
     * @param roleName The name of the role that you are in
     * @param projectCode The name of the project code that you are trying to set
     */
    public void setVisibility(String roleName, String projectCode){

        graphPanel.removeAll();

        //Go through the chart list
        for (JFreeChart chart : chartList) {

            //If we've found the right chart based on the role name
            if (chart.getTitle().getText().equals(roleName)) {

                //Get the index of the project code series we're looking for
                XYPlot plot = (XYPlot) chart.getPlot();
                int index = plot.getDataset(0).indexOf(projectCode);

                //If we've found the project code we're looking for
                if (index != -1){

                    //If the series is visible, make it invisible, else make it visible 
                    if (plot.getRendererForDataset(plot.getDataset(0)).isSeriesVisible(index)){
                        plot.getRendererForDataset(plot.getDataset(0)).setSeriesVisible(index, false);
                    }else{
                     plot.getRendererForDataset(plot.getDataset(0)).setSeriesVisible(index, true);
                    }
                }

                //Adds the new chartpanel to the graph panel and repaints it
                ChartPanel chartPanel = new ChartPanel(chart);
                chartPanel.setSize(graphPanel.getWidth(), graphPanel.getHeight());
                chartPanel.setVisible(true);
                graphPanel.add(chartPanel);
                graphPanel.repaint();
            }
        }
    }
    
    /**
     * Given a start date, increments it by a certain period 
     * @param startDate The date we start with 
     * @return The date incremented by a predefined period 
     */
    public Date getEndDate(Date startDate){
        Calendar cal = Calendar.getInstance(); 
        cal.setTime(startDate);
        cal.add(Calendar.MONTH, MONTHLOOKAHEAD);
        return cal.getTime();
    }
    
    /**
     * Given a date, gets the first day of that week
     * @param startDate The start date
     * @return The first day of that week 
     */
    public Date getStartOfWeek(Date startDate){
        Calendar cal = Calendar.getInstance();
        cal.setFirstDayOfWeek(Calendar.MONDAY); //Default first day is Sunday, lets change that to Monday 
        cal.setTime(startDate);
        cal.set(Calendar.DAY_OF_WEEK, cal.getFirstDayOfWeek());
        //System.out.println("Start of this week:       " + cal.getTime());
        return cal.getTime();
    }
    
    /**
     * Creates another click enabled legend based on the legend of the current plot being displayed on the graph panel
     * @param plot The current plot being displayed on the graph panel. 
     */
    public void createLegendPanel(XYPlot plot) {
    //Empty this panel before doing more work 
    legendPanel.removeAll();
    //Iterate through all the plots to get their names
    Iterator iterator = plot.getLegendItems().iterator();
    //Make a button out of every item with the icon being the color that it has 
    while (iterator.hasNext()) {
        LegendItem item = (LegendItem) iterator.next();
        JButton myButton = new JButton(item.getLabel());
        myButton.setIcon(new ColorIcon(10, item.getFillPaint()));
        myButton.setFont(new Font(myButton.getFont().getName(), Font.PLAIN, 10));
        myButton.setPreferredSize(new Dimension(160, 30));
        
        //Add a mouse listener to be able to perceive mouse clicks on the JLabels
        myButton.addMouseListener(new java.awt.event.MouseAdapter() {
               @Override
               public void mouseClicked(java.awt.event.MouseEvent evt) {
                   System.out.println("Label clicked is " + myButton.getText());
                   String currentProject = myButton.getText();
                   String currentRole = rolePicker.getSelectedItem().toString();
                   setVisibility(currentRole, currentProject);
               }
        });
        

        legendPanel.add(myButton); //Add the button 
        legendPanel.repaint();
        System.out.println("Label is " + item.getLabel());

    }
    legendPanel.repaint();
    this.revalidate();
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel authXLogo;
    private javax.swing.JLabel datePicker;
    private javax.swing.JLabel datePicker1;
    private javax.swing.JLabel datePicker2;
    private javax.swing.JLabel datePicker5;
    private javax.swing.JTextField employeeNumString;
    private org.jdesktop.swingx.JXDatePicker endDatePicker;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private javax.swing.JPanel legendPanel;
    private javax.swing.JButton recalculateData;
    private javax.swing.JButton resetButton;
    private javax.swing.JComboBox<String> rolePicker;
    private javax.swing.JLabel rolePickerLabel;
    private org.jdesktop.swingx.JXDatePicker startDatePicker;
    // End of variables declaration//GEN-END:variables

    /**
     * A color class meant to make circles with specific colors based on the color of the item in the legend 
     */
    class ColorIcon implements Icon {

        private int size;
        private Paint paint;

        public ColorIcon(int size, Paint paint) {
            this.size = size;
            this.paint = paint;
        }

        public void paintIcon(Component c, Graphics g, int x, int y) {
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setPaint(paint);
            g2d.fillOval(x, y, size, size);
        }

        @Override
        public int getIconWidth() {
            return size;
        }

        @Override
        public int getIconHeight() {
            return size;
        }
}

}
